package com.ninja.ninjaccount.web.rest.util;

import com.ninja.ninjaccount.domain.User;
import com.ninja.ninjaccount.security.srp.SRP6ServerWorkflow;
import com.ninja.ninjaccount.service.SrpService;
import com.ninja.ninjaccount.service.dto.SrpDTO;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.security.core.token.Sha512DigestUtils;
import org.springframework.stereotype.Service;

import java.math.BigInteger;
import java.security.SecureRandom;
import java.util.UUID;

@Service
public class SrpUtils {

    private final Logger log = LoggerFactory.getLogger(SrpUtils.class);

    @Value("${application.srp.N}")
    private BigInteger N;

    @Value("${application.srp.g}")
    private BigInteger g;

    @Value("${application.srp.k}")
    private String kHex;

    private SecureRandom secureRandom;

    @Autowired
    private SrpService srpService;

    @Autowired
    private SRP6ServerWorkflow srp6ServerWorkflow;

    public SrpUtils() {
        this.secureRandom = new SecureRandom();
    }

    public BigInteger generateA(BigInteger a) {
        return g.modPow(a, N);
    }

    /**
     * Generates a random SRP-6a client or server private value ('a' or
     * 'b') which is in the range [1,N-1] generated by a random number of
     * at least 256 bits.
     *
     * <p>Specification: RFC 5054.
     *
     * @return The resulting client or server private value ('a' or 'b').
     */
    public BigInteger generatePrivateValue() {

        final int minBits = Math.max(256, N.bitLength());

        BigInteger r = BigInteger.ZERO;

        while (BigInteger.ZERO.equals(r)) {
            r = (new BigInteger(minBits, secureRandom)).mod(N);
        }

        return r;
    }

    public String generateM1(BigInteger x, BigInteger a, BigInteger B, BigInteger A) {
        BigInteger uClient = new BigInteger(Sha512DigestUtils.shaHex(A.toString(16) + B.toString(16)), 16);

        BigInteger exp = uClient.multiply(x).add(a);
        BigInteger tmp = g.modPow(x, N).multiply(new BigInteger(kHex, 16));
        BigInteger tmp2 = B.subtract(tmp);
        BigInteger premasterClientSecret = tmp2.modPow(exp, N);

        log.info("uClientHex : " + uClient.toString(16));
        log.info("exp : " + exp);
        log.info("tmp : " + tmp);
        log.info("tmp2 : " + tmp2);
        log.info("SC : " + premasterClientSecret.toString());
        log.info("SC : " + premasterClientSecret.toString(16));

        return Sha512DigestUtils.shaHex(A.toString(16) + B.toString(16) + premasterClientSecret.toString(16));
    }

    public SrpDTO generateSRPEntity(User user, String password) {
        String salt = UUID.randomUUID().toString().replace("-", "");
        BigInteger verifier = srp6ServerWorkflow.generateVerifier(salt, user.getLogin(), password);
        return srpService.createSrp(salt, verifier.toString(16), user);
    }
}
